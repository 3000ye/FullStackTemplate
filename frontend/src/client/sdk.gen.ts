// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from "./core/CancelablePromise"
import { OpenAPI } from "./core/OpenAPI"
import { request as __request } from "./core/request"
import {
  LoginLoginAccessTokenData,
  LoginLoginAccessTokenResponse,
  LoginTestTokenResponse,
  UsersDeleteUserData,
  UsersDeleteUserResponse,
  UpdateUserData,
  UpdateUserResponse,
  QueryUserSelfResponse,
  QueryUsersData,
  QueryUsersResponse,
  CreateUserData,
  CreateUserResponse,
  QueryProductsData,
  QueryProductsResponse,
  QueryProductDictResponse,
  QueryProductsValueData,
  QueryProductsValueResponse,
  QueryProductInfoBoardResponse,
  QueryProductInfoResponse,
  UpdateProductInfoResponse,
  UpdateProductInfoData,
  QueryProductInfoData,
  QueryProductReportResponse,
  QueryProductReportData,
  QueryProductCfgByCodeData,
  QueryProductReportCfgByCodeResponse,
  UpdateProductReportCfgResponse,
  UpdateProductReportCfgData,
  QueryMulProductReportResponse,
  QueryMulProductReportData,
  QueryProductReportCfgListResponse,
  QueryAumResponse,
  QueryOpenDayCalendarResponse,
  QueryOpenDayByCodeResponse,
  QueryOpenDayByCode,
  UpdateOpenDayData,
  QueryAccrualDayCalendarResponse,
  QueryAccrualDayByCodeResponse,
  QueryAccrualDayByCode,
  UpdateAccrualDayData,
  QueryProductAccountByCode,
  QueryProductAccountByCodeResponse,
  AddProductAccountData,
  UpdateProductAccountData,
  DeleteProductAccountData,
  QueryDashboardResponse,
  QueryProductReportTplListResponse,
  AddProductReportTplData,
  UpdateProductReportTplData,
  DeleteProductReportTplData, AddCustomerTradeData, UpdateCustomerTradeData, QueryLiveProductListResponse,
  QueryCustomerTradeListResponse, DelCustomerTradeData, CustomerInfoQueryData, CustomerInfoQueryResponse,
  AddProductInitData, UpdateProductInitData, DeleteProductInitData, QueryProductInitListResponse, DingTalkAtSomeoneData,
  UpdateCustomerInfoData
} from "./types.gen"


export class LoginService {
  /**
   * Login Access Token
   * OAuth2 compatible token login, get an access token for future requests
   * @param data The data for the request.
   * @param data.formData
   * @returns Token Successful Response
   * @throws ApiError
   */
  public static loginAccessToken(
    data: LoginLoginAccessTokenData,
  ): CancelablePromise<LoginLoginAccessTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/system/auth/token",
      formData: data.formData,
      mediaType: "application/x-www-form-urlencoded",
      errors: {
        422: "Validation Error",
        500: "Internal Server Error",
      },
    })
  }

  /**
   * Test Token
   * Test access token
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static testToken(): CancelablePromise<LoginTestTokenResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/v1/login/test-token",
    })
  }
}

export class UsersService {
  /**
   * Query Users
   * Retrieve users.
   * @param data The data for the request.
   * @param data.skip
   * @param data.limit
   * @returns UsersPublic Successful Response
   * @throws ApiError
   */
  public static queryUsers(
      data: QueryUsersData,
  ): CancelablePromise<QueryUsersResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/user/query_user",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
        500: "Internal Server Error",
      },
    })
  }

  /**
   * Create User
   * Create new user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static createUser(
    data: CreateUserData,
  ): CancelablePromise<CreateUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/user/create_user",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
        500: "Internal Server Error",
      },
    })
  }

  /**
   * Update User
   * Update a user.
   * @param data The data for the request.
   * @param data.userId
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static updateUser(
      data: UpdateUserData,
  ): CancelablePromise<UpdateUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/user/update_user",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
        500: "Internal Server Error",
      },
    })
  }

  /**
   * Delete User
   * Delete a user.
   * @param data The data for the request.
   * @param data.userId
   * @returns Message Successful Response
   * @throws ApiError
   */
  public static deleteUser(
      data: UsersDeleteUserData,
  ): CancelablePromise<UsersDeleteUserResponse> {
    return __request(OpenAPI, {
      method: "DELETE",
      url: "/api/v1/users/{user_id}",
      path: {
        user_id: data.userId,
      },
      errors: {
        422: "Validation Error",
        500: "Internal Server Error",
      },
    })
  }

  /**
   * Query User Self
   * Get current user.
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static queryUserSelf(): CancelablePromise<QueryUserSelfResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/user/query_self",
    })
  }

  /**
   * Update User Self
   * Update own user.
   * @param data The data for the request.
   * @param data.requestBody
   * @returns UserPublic Successful Response
   * @throws ApiError
   */
  public static updateUserSelf(
      data: UpdateUserData,
  ): CancelablePromise<UpdateUserResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/user/update_self",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
        500: "Internal Server Error",
      },
    })
  }
}

export class ProductService {
  public static queryProducts(
      data: QueryProductsData,
  ): CancelablePromise<QueryProductsResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/product/query_product",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
        500: "Internal Server Error",
      }
    })
  }

  public static queryProductDict(): CancelablePromise<QueryProductDictResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/product/query_product_dict",
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
        500: "Internal Server Error",
      }
    })
  }

  public static queryLiveProductList(): CancelablePromise<QueryLiveProductListResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/product/query_live_product_list",
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
        500: "Internal Server Error",
      }
    })
  }

  public static exportProducts(
      data: QueryProductsData,
  ): CancelablePromise<Blob> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/product/export_product",
      body: data.requestBody,
      mediaType: "application/json",
      responseType: "blob",
      errors: {
        422: "Validation Error",
        500: "Internal Server Error",
      }
    })
  }

  public static queryProductInfoBoard(
      code: string,
  ): CancelablePromise<QueryProductInfoBoardResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: `/api/product/info/${code}`,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
        500: "Internal Server Error",
      }
    })
  }

  public static queryProductInfo(
      data: QueryProductInfoData,
  ): CancelablePromise<QueryProductInfoResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: `/api/product/query_info`,
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
        500: "Internal Server Error",
      }
    })
  }

  public static updateProductInfo(
      data: UpdateProductInfoData,
  ): CancelablePromise<UpdateProductInfoResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: `/api/product/update_info`,
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
        500: "Internal Server Error",
      }
    })
  }

  public static queryProductReportCfgByCode(
      data: QueryProductCfgByCodeData,
  ): CancelablePromise<QueryProductReportCfgByCodeResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: `/api/product/query_report_cfg_by_code`,
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
        500: "Internal Server Error",
      }
    })
  }

  public static queryMulProductReportCfgList():
  CancelablePromise<QueryProductReportCfgListResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: `/api/product/query_mul_report_cfg_list`,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
        500: "Internal Server Error",
      }
    })
  }

  public static updateMulProductReportCfg(
      data: UpdateProductReportCfgData,
  ): CancelablePromise<UpdateProductReportCfgResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: `/api/product/update_mul_report_cfg`,
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
        500: "Internal Server Error",
      }
    })
  }

  public static queryProductReportTplList(): CancelablePromise<QueryProductReportTplListResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: `/api/product/query_product_report_tpl_list`,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
        500: "Internal Server Error",
      }
    })
  }

  public static addProductReportTpl(
      data: AddProductReportTplData,
  ): CancelablePromise<any> {
    return __request(OpenAPI, {
      method: "POST",
      url: `/api/product/add_product_report_tpl`,
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
        500: "Internal Server Error",
      }
    })
  }

  public static updateProductReportTpl(
      data: UpdateProductReportTplData,
  ): CancelablePromise<any> {
    return __request(OpenAPI, {
      method: "POST",
      url: `/api/product/update_product_report_tpl`,
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
        500: "Internal Server Error",
      }
    })
  }

  public static deleteProductReportTpl(
      data: DeleteProductReportTplData,
  ): CancelablePromise<any> {
    return __request(OpenAPI, {
      method: "POST",
      url: `/api/product/delete_product_report_tpl_by_id`,
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
        500: "Internal Server Error",
      }
    })
  }

  public static queryProductReport(
      data: QueryProductReportData,
  ): CancelablePromise<QueryProductReportResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: `/api/product/query_report`,
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
        500: "Internal Server Error",
      }
    })
  }

  public static queryMulProductReport(
      data: QueryMulProductReportData,
  ): CancelablePromise<QueryMulProductReportResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: `/api/product/query_mul_report`,
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
        500: "Internal Server Error",
      }
    })
  }

  public static queryAum(): CancelablePromise<QueryAumResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: `/api/product/query_aum`,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
        500: "Internal Server Error",
      }
    })
  }

  public static queryOpenDayCalendar(): CancelablePromise<QueryOpenDayCalendarResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: `/api/product/query_open_day_calendar`,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
        500: "Internal Server Error",
      }
    })
  }

  public static queryOpenDayByCode(
      data: QueryOpenDayByCode
  ): CancelablePromise<QueryOpenDayByCodeResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: `/api/product/query_open_day`,
      body: data,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
        500: "Internal Server Error",
      }
    })
  }

  public static updateOpenDayByCode(
      data: UpdateOpenDayData
  ): CancelablePromise<QueryOpenDayByCodeResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: `/api/product/update_open_day`,
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
        500: "Internal Server Error",
      }
    })
  }

  public static queryAccrualDayCalendar(): CancelablePromise<QueryAccrualDayCalendarResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: `/api/product/query_accrual_day_calendar`,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
        500: "Internal Server Error",
      }
    })
  }

  public static queryAccrualDayByCode(
      data: QueryAccrualDayByCode
  ): CancelablePromise<QueryAccrualDayByCodeResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: `/api/product/query_accrual_day`,
      body: data,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
        500: "Internal Server Error",
      }
    })
  }

  public static updateAccrualDayByCode(
      data: UpdateAccrualDayData
  ): CancelablePromise<QueryAccrualDayByCodeResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: `/api/product/update_accrual_day`,
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
        500: "Internal Server Error",
      }
    })
  }

  public static queryProductDashboard(): CancelablePromise<QueryDashboardResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: `/api/product/dashboard`,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
        500: "Internal Server Error",
      }
    })
  }

  public static addProductAccount(
      data: AddProductAccountData
  ): CancelablePromise<any> {
    return __request(OpenAPI, {
      method: "POST",
      url: `/api/product/add_product_account`,
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
        500: "Internal Server Error",
      }
    })
  }

  public static updateProductAccount(
      data: UpdateProductAccountData
  ): CancelablePromise<any> {
    return __request(OpenAPI, {
      method: "POST",
      url: `/api/product/update_product_account`,
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
        500: "Internal Server Error",
      }
    })
  }

  public static deleteProductAccount(
      data: DeleteProductAccountData
  ): CancelablePromise<any> {
    return __request(OpenAPI, {
      method: "POST",
      url: `/api/product/delete_product_account`,
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
        500: "Internal Server Error",
      }
    })
  }

  public static queryProductAccount(
      data: QueryProductAccountByCode
  ): CancelablePromise<QueryProductAccountByCodeResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: `/api/product/query_product_account`,
      body: data,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
        500: "Internal Server Error",
      }
    })
  }

  public static addProductInit(
      data: AddProductInitData
  ): CancelablePromise<any> {
    return __request(OpenAPI, {
      method: "POST",
      url: `/api/product/add_product_init`,
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
        500: "Internal Server Error",
      }
    })
  }

  public static updateProductInit(
      data: UpdateProductInitData
  ): CancelablePromise<any> {
    return __request(OpenAPI, {
      method: "POST",
      url: `/api/product/update_product_init`,
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
        500: "Internal Server Error",
      }
    })
  }

  public static deleteProductInit(
      data: DeleteProductInitData
  ): CancelablePromise<any> {
    return __request(OpenAPI, {
      method: "POST",
      url: `/api/product/delete_product_init`,
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
        500: "Internal Server Error",
      }
    })
  }

  public static queryProductInitList(): CancelablePromise<QueryProductInitListResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: `/api/product/query_product_init_list`,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
        500: "Internal Server Error",
      }
    })
  }

  public static queryProductsValue(
      data: QueryProductsValueData,
  ): CancelablePromise<QueryProductsValueResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/product/query_product_value",
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
        500: "Internal Server Error",
      }
    })
  }

  public static exportProductsValue(
      data: QueryProductsValueData,
  ): CancelablePromise<Blob> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/product/export_product_value",
      body: data.requestBody,
      mediaType: "application/json",
      responseType: "blob",
      errors: {
        422: "Validation Error",
        500: "Internal Server Error",
      }
    })
  }
}

export class CustomerService {
  public static addCustomerTrade(
      data: AddCustomerTradeData
  ): CancelablePromise<any> {
    return __request(OpenAPI, {
      method: "POST",
      url: `/api/customer/add_customer_trade`,
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
        500: "Internal Server Error",
      }
    })
  }

  public static delCustomerTrade(data: DelCustomerTradeData): CancelablePromise<any> {
    return __request(OpenAPI, {
      method: "POST",
      url: `/api/customer/del_customer_trade`,
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
        500: "Internal Server Error",
      }
    })
  }

  public static updateCustomerTrade(
      data: UpdateCustomerTradeData
  ): CancelablePromise<any> {
    return __request(OpenAPI, {
      method: "POST",
      url: `/api/customer/update_customer_trade`,
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
        500: "Internal Server Error",
      }
    })
  }

  public static queryCustomerTradeList(): CancelablePromise<QueryCustomerTradeListResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: `/api/customer/query_customer_trade_list`,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
        500: "Internal Server Error",
      }
    })
  }

  public static queryCustomerInfoWithShare(
      data: CustomerInfoQueryData
  ): CancelablePromise<CustomerInfoQueryResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: `/api/customer/query_customer_info_with_share`,
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
        500: "Internal Server Error",
      }
    })
  }

  public static queryCustomerInfoList(
      data: CustomerInfoQueryData
  ): CancelablePromise<CustomerInfoQueryResponse> {
    return __request(OpenAPI, {
      method: "POST",
      url: `/api/customer/query_customer_info_list`,
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
        500: "Internal Server Error",
      }
    })
  }

  public static updateCustomerInfo(
      data: UpdateCustomerInfoData
  ): CancelablePromise<any> {
    return __request(OpenAPI, {
      method: "POST",
      url: `/api/customer/update_customer_info`,
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
        500: "Internal Server Error",
      }
    })
  }

  public static exportCustomerInfoList(
      data: CustomerInfoQueryData
  ): CancelablePromise<Blob> {
    return __request(OpenAPI, {
      method: "POST",
      url: "/api/product/export_customer_info_list",
      body: data.requestBody,
      mediaType: "application/json",
      responseType: "blob",
      errors: {
        422: "Validation Error",
        500: "Internal Server Error",
      }
    })
  }
}

export class DingTalkService {
  public static dingtaklAtSomeone(
      data: DingTalkAtSomeoneData
  ): CancelablePromise<any> {
    return __request(OpenAPI, {
      method: "POST",
      url: `/api/dingtalk/at_someone`,
      body: data.requestBody,
      mediaType: "application/json",
      errors: {
        422: "Validation Error",
        500: "Internal Server Error",
      }
    })
  }
}