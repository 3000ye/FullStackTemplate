/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as TestImport } from './routes/_test'
import { Route as LayoutImport } from './routes/_layout'
import { Route as LayoutIndexImport } from './routes/_layout/index'
import { Route as TestTestcardImport } from './routes/_test/test_card'
import { Route as LayoutSettingsImport } from './routes/_layout/settings'
import { Route as LayoutReleaseImport } from './routes/_layout/release'
import { Route as LayoutAdminImport } from './routes/_layout/admin'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const TestRoute = TestImport.update({
  id: '/_test',
  getParentRoute: () => rootRoute,
} as any)

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const LayoutIndexRoute = LayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)

const TestTestcardRoute = TestTestcardImport.update({
  id: '/test_card',
  path: '/test_card',
  getParentRoute: () => TestRoute,
} as any)

const LayoutSettingsRoute = LayoutSettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutReleaseRoute = LayoutReleaseImport.update({
  id: '/release',
  path: '/release',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutAdminRoute = LayoutAdminImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => LayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/_test': {
      id: '/_test'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof TestImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/_layout/admin': {
      id: '/_layout/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof LayoutAdminImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/release': {
      id: '/_layout/release'
      path: '/release'
      fullPath: '/release'
      preLoaderRoute: typeof LayoutReleaseImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/settings': {
      id: '/_layout/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof LayoutSettingsImport
      parentRoute: typeof LayoutImport
    }
    '/_test/test_card': {
      id: '/_test/test_card'
      path: '/test_card'
      fullPath: '/test_card'
      preLoaderRoute: typeof TestTestcardImport
      parentRoute: typeof TestImport
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexImport
      parentRoute: typeof LayoutImport
    }
  }
}

// Create and export the route tree

interface LayoutRouteChildren {
  LayoutAdminRoute: typeof LayoutAdminRoute
  LayoutReleaseRoute: typeof LayoutReleaseRoute
  LayoutSettingsRoute: typeof LayoutSettingsRoute
  LayoutIndexRoute: typeof LayoutIndexRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutAdminRoute: LayoutAdminRoute,
  LayoutReleaseRoute: LayoutReleaseRoute,
  LayoutSettingsRoute: LayoutSettingsRoute,
  LayoutIndexRoute: LayoutIndexRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

interface TestRouteChildren {
  TestTestcardRoute: typeof TestTestcardRoute
}

const TestRouteChildren: TestRouteChildren = {
  TestTestcardRoute: TestTestcardRoute,
}

const TestRouteWithChildren = TestRoute._addFileChildren(TestRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof TestRouteWithChildren
  '/login': typeof LoginRoute
  '/admin': typeof LayoutAdminRoute
  '/release': typeof LayoutReleaseRoute
  '/settings': typeof LayoutSettingsRoute
  '/test_card': typeof TestTestcardRoute
  '/': typeof LayoutIndexRoute
}

export interface FileRoutesByTo {
  '': typeof TestRouteWithChildren
  '/login': typeof LoginRoute
  '/admin': typeof LayoutAdminRoute
  '/release': typeof LayoutReleaseRoute
  '/settings': typeof LayoutSettingsRoute
  '/test_card': typeof TestTestcardRoute
  '/': typeof LayoutIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/_test': typeof TestRouteWithChildren
  '/login': typeof LoginRoute
  '/_layout/admin': typeof LayoutAdminRoute
  '/_layout/release': typeof LayoutReleaseRoute
  '/_layout/settings': typeof LayoutSettingsRoute
  '/_test/test_card': typeof TestTestcardRoute
  '/_layout/': typeof LayoutIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/login'
    | '/admin'
    | '/release'
    | '/settings'
    | '/test_card'
    | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '' | '/login' | '/admin' | '/release' | '/settings' | '/test_card' | '/'
  id:
    | '__root__'
    | '/_layout'
    | '/_test'
    | '/login'
    | '/_layout/admin'
    | '/_layout/release'
    | '/_layout/settings'
    | '/_test/test_card'
    | '/_layout/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren
  TestRoute: typeof TestRouteWithChildren
  LoginRoute: typeof LoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
  TestRoute: TestRouteWithChildren,
  LoginRoute: LoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_layout",
        "/_test",
        "/login"
      ]
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/admin",
        "/_layout/release",
        "/_layout/settings",
        "/_layout/"
      ]
    },
    "/_test": {
      "filePath": "_test.tsx",
      "children": [
        "/_test/test_card"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/_layout/admin": {
      "filePath": "_layout/admin.tsx",
      "parent": "/_layout"
    },
    "/_layout/release": {
      "filePath": "_layout/release.tsx",
      "parent": "/_layout"
    },
    "/_layout/settings": {
      "filePath": "_layout/settings.tsx",
      "parent": "/_layout"
    },
    "/_test/test_card": {
      "filePath": "_test/test_card.tsx",
      "parent": "/_test"
    },
    "/_layout/": {
      "filePath": "_layout/index.tsx",
      "parent": "/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
